class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        # If nums is size of 1, return true if nums is the target, false otherwise.
        if len(nums) == 1:
            return nums[0] == target
        
        # Recursive binary search
        def targetInNums(nums):
            left, right = 0, len(nums) - 1
            mid = (left + right) // 2
            
            # Exit condition 1
            if left >= right:
                return False
            
            # Exit condition 2 - leftmost, rightmost, or mid values is the target
            if nums[mid] == target or nums[left] == target or nums[right] == target:
                return True
            
            # If pivot is to the left of mid
            if nums[left] > nums[mid]:
                # If the target value is between mid and right
                if nums[mid] < target < nums[right]:
                    # Check if target is in the right half
                    return targetInNums(nums[mid+1:right+1])
                else:
                    # Check if target is in the left half
                    return targetInNums(nums[left:mid])
            # If pivot is to the right of mid
            elif nums[right] < nums[mid]:
                # If the target value is between left and mid
                if nums[left] < target < nums[mid]:
                    # Check if target is in the left half
                    return targetInNums(nums[left:mid])
                else:
                    # Check if target is in the right half
                    return targetInNums(nums[mid+1:right+1])
            # If we cannot determine if the pivot is on the left or the right
            # Example: 2 5 6 2 2 2 2
            #          ^left ^mid  ^right
            # nums[left] == nums[mid] == nums[right] is True
            # We must check both the left and the right half
            else:
                # Check if one of the two halves contain target
                return targetInNums(nums[left:mid]) or targetInNums(nums[mid+1:right+1])
        
        return targetInNums(nums)
